/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package juegoiavj;

import juegoiavj.kinematic.uniforme.*;
import juegoiavj.math.Vector;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import juegoiavj.kinematic.Kinematic;
import juegoiavj.kinematic.acelerado.*;
import juegoiavj.kinematic.acelerado.delegado.*;
import juegoiavj.util.Block;
import juegoiavj.util.BlockMap;
import org.lwjgl.LWJGLException;
import org.lwjgl.Sys;
import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.DisplayMode;
import org.lwjgl.opengl.GL11;
import org.newdawn.slick.*;
import org.newdawn.slick.geom.Polygon;
import org.newdawn.slick.imageout.ImageOut;

/**
 * ublic class JuegoIAV
 *
 * @author Samuel Navas
 */

public class JuegoIAVJ extends BasicGame {
    // Kinematics

    private Kinematic jugador1;
    private Kinematic jugador2;
    private Kinematic camara;
    private Kinematic raton;
    private KinematicArrive steeringA, steeringCAM;
    private KinematicWander steeringW;
    private KinematicFlee steeringF;
    private KinematicSeek steeringS;
    private KinematicSeekA steeringSA;
    private KinematicAling steeringAA;
    private KinematicVelocityMatching steeringVM;
    private KinematicArriveA steeringAC;
    private KinematicFleeA steeringFA;
    private KinematicEvade steeringE;
    private KinematicPursue steeringP;
    private KinematicFace steeringFAC;
    private KinematicWanderD steeringWD;
    private int lastSteering = 0;
    private Image plane1 = null;
    private Image plane2 = null;
    private Image land = null;
    private float scale = 0.75f;
    private Polygon playerPoly;
    private BlockMap map;
    private Music bgm;
    
    private Image tile1;
    private Image tile2;
    private Image tile3;
    private Image tile4;
    private Image tile5;

    public JuegoIAVJ() {
        super("Jedis VS Siths");
    }

    public static void main(String[] argv) throws SlickException {
        try {
            AppGameContainer app = new AppGameContainer(new JuegoIAVJ());
            DisplayMode[] modes = Display.getAvailableDisplayModes();
            int x = 0;
            int y = 0;
            for (int i = 0; i < modes.length; i++) {
                DisplayMode current = modes[i];
                if (current.getWidth() > x) {
                    x = current.getWidth();
                    y = current.getHeight();
                }
            }
            app.setDisplayMode(x, y, true);
            app.setTargetFrameRate(60);
            app.setVSync(true);
            app.start();
        } catch (LWJGLException ex) {
            Logger.getLogger(JuegoIAVJ.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    @Override
    public void init(GameContainer container) throws SlickException {
        //jugador1 = new Kinematic(400, 300, 0);;
        jugador1 = new Kinematic(400, 300);
        jugador2 = new Kinematic(100, 200);
        camara = new Kinematic(0, 0);
        raton = new Kinematic(0, 0);
        steeringA = new KinematicArrive(jugador2, jugador1, 0.1, 50);
        steeringW = new KinematicWander(jugador2, 0.1, 0.025);
        steeringF = new KinematicFlee(jugador2, jugador1, 0.1);
        steeringS = new KinematicSeek(jugador2, jugador1, 0.1);
        steeringSA = new KinematicSeekA(jugador2, jugador1, 0.1);
        steeringAA = new KinematicAling(jugador1, jugador1, 0.1, 0.1, 0.1, 0.1);
        steeringVM = new KinematicVelocityMatching(jugador1, jugador1, 0.1);
        steeringAC = new KinematicArriveA(jugador2, jugador1, 0.005, 0.01, 0.05, 0.05);
        steeringFA = new KinematicFleeA(jugador2, jugador1, 0.1);
        steeringCAM = new KinematicArrive(camara, raton, 0.5, 10);
        steeringE = new KinematicEvade(jugador2, jugador1, 0.1, 0.1);
        steeringP = new KinematicPursue(jugador2, jugador1, 0.1, 0.1);
        steeringFAC = new KinematicFace(jugador2, jugador1, 0.1, 0.1, 0.1, 0.1);
        steeringWD = new KinematicWanderD(jugador2, jugador1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1);
        plane1 = new Image("Material/imagenes/plane1.png");
        plane2 = new Image("Material/imagenes/plane2.png");
        land = new Image("Material/imagenes/Basic_slick_game_background.jpg");
        map = new BlockMap("Material/mapas/gnollwood_map.tmx");
        //bgm =  new Music("Material/sonidos/jediBGM.ogg");
        //bgm.loop();
        
        tile1 = new Image("Material/mapas/tile1.png");
        tile2 = new Image("Material/mapas/tile2.png");
        tile3 = new Image("Material/mapas/tile3.png");
        tile4 = new Image("Material/mapas/tile4.png");
        tile5 = new Image("Material/mapas/tile5.png");
        
        playerPoly = new Polygon(new float[]{
                    400, 300,
                    400 + 122, 300,
                    400 + 122, 300 + 122,
                    400, 300 + 122
                });
    }

    @Override
    public void update(GameContainer container, int delta) throws SlickException {
        /*
         * El sistema de update llamará tambien al modulo de IA (Jess) con la informacion del
         * mundo para que tome decisiones y le diga a update como tiene que actualizar.
         */
        //throw new UnsupportedOperationException("Not supported yet.");
        Input input = container.getInput();

        // rotate quad
        double x1 = jugador1.getPosicion().getX();
        double y1 = jugador1.getPosicion().getY();

        if (Keyboard.isKeyDown(Keyboard.KEY_LEFT)) {
            plane1.rotate(-0.2f * delta);
        }
        if (Keyboard.isKeyDown(Keyboard.KEY_RIGHT)) {
            plane1.rotate(0.2f * delta);
        }

        if (Keyboard.isKeyDown(Keyboard.KEY_DOWN)) {
            float hip = 0.4f * delta;
            float rotation = plane1.getRotation();
            x1 -= hip * Math.sin(Math.toRadians(rotation));
            y1 += hip * Math.cos(Math.toRadians(rotation));
        }
        if (Keyboard.isKeyDown(Keyboard.KEY_UP)) {
            float hip = 0.4f * delta;
            float rotation = plane1.getRotation();
            x1 += hip * Math.sin(Math.toRadians(rotation));
            y1 -= hip * Math.cos(Math.toRadians(rotation));
        }

        // keep plane on the screen
        /*
        if (x1 < 0) {
            x1 = 0;
        }
        if (x1 > container.getWidth() - 100) {
            x1 = container.getWidth() - 100;
        }
        if (y1 < 0) {
            y1 = 0;
        }
        if (y1 > container.getHeight() - 100) {
            y1 = container.getHeight() - 100;
        }
        * */
        
        Vector posicion = jugador1.getPosicion();
        posicion.setX(x1);
        posicion.setZ(y1);
        jugador1.setPosicion(posicion);

        // jugador 2
        if (Keyboard.isKeyDown(Keyboard.KEY_W)) {
            lastSteering = 1;
        } else if (Keyboard.isKeyDown(Keyboard.KEY_A)) {
            lastSteering = 2;
        } else if (Keyboard.isKeyDown(Keyboard.KEY_F)) {
            lastSteering = 3;
        } else if (Keyboard.isKeyDown(Keyboard.KEY_S)) {
            lastSteering = 4;
        } else if (Keyboard.isKeyDown(Keyboard.KEY_1)) {
            lastSteering = 5;
        } else if (Keyboard.isKeyDown(Keyboard.KEY_2)) {
            lastSteering = 6;
        } else if (Keyboard.isKeyDown(Keyboard.KEY_V)) {
            lastSteering = 7;
        } else if (Keyboard.isKeyDown(Keyboard.KEY_3)) {
            lastSteering = 8;
        } else if (Keyboard.isKeyDown(Keyboard.KEY_4)) {
            lastSteering = 9;
        } else if (Keyboard.isKeyDown(Keyboard.KEY_P)) {
            lastSteering = 10;
        } else if (Keyboard.isKeyDown(Keyboard.KEY_E)) {
            lastSteering = 11;
        } else if (Keyboard.isKeyDown(Keyboard.KEY_5)) {
            lastSteering = 12;
        } else if (Keyboard.isKeyDown(Keyboard.KEY_6)) {
            lastSteering = 13;
        }

        switch (lastSteering) {
            case 1:
                jugador2.update(steeringW.getSteering(), 0.05, delta);
                break;
            case 2:
                jugador2.update(steeringA.getSteering(), 0.05, delta);
                break;
            case 3:
                jugador2.update(steeringF.getSteering(), 0.05, delta);
                break;
            case 4:
                jugador2.update(steeringS.getSteering(), 0.05, delta);
                break;
            case 5:
                jugador2.update(steeringSA.getSteering(), 0.2, delta);
                break;
            case 6:
                jugador2.update(steeringAA.getSteering(), 0.05, delta);
                break;
            case 7:
                jugador2.update(steeringVM.getSteering(), 0.05, delta);
                break;
            case 8:
                jugador2.update(steeringFA.getSteering(), 0.05, delta);
                break;
            case 9:
                jugador2.update(steeringAC.getSteering(), 5, delta);
                break;
            case 10:
                jugador2.update(steeringP.getSteering(), 0.05, delta);
                break;
            case 11:
                jugador2.update(steeringE.getSteering(), 0.05, delta);
                break;
            case 12:
                jugador2.update(steeringFAC.getSteering(), 0.05, delta);
                break;
            case 13:
                jugador2.update(steeringWD.getSteering(), 0.05, delta);
                break;
            default:
        }

        //
        System.out.println("Plane2: " + jugador2.getOrientacion());
        plane2.setRotation((float) jugador2.getOrientacion());
        //plane2.rotate((float) (jugador2.getOrientacion() * delta));
        //System.out.println(jugador2.getOrientacion());

        // keep plane on the screen
        if (jugador2.getPosicion().getX() < 0) {
            jugador2.getPosicion().setX(0);
        }
        if (jugador2.getPosicion().getX() > container.getWidth() - 100) {
            jugador2.getPosicion().setX(container.getWidth() - 100);
        }
        if (jugador2.getPosicion().getY() < 0) {
            jugador2.getPosicion().setZ(0);
        }
        if (jugador2.getPosicion().getY() > container.getHeight() - 100) {
            jugador2.getPosicion().setZ(container.getHeight() - 100);
        }

        if (input.isKeyPressed(Input.KEY_F1)) {
            Image target = new Image(container.getWidth(), container.getHeight());
            container.getGraphics().copyArea(target, 0, 0);
            ImageOut.write(target.getFlippedCopy(false, true), "screenshot.png", false);
            target.destroy();
        }

        updateCamera(container);

        System.out.println("SCALE: " + scale);
        System.out.println("H: " + container.getHeight() + ", W: " + container.getWidth());
        System.out.println("raton: " + (-input.getMouseX()) + "," + (-input.getMouseY()));
        System.out.println("Plane1 ("+jugador1.getPosicion().getX()+","+jugador1.getPosicion().getY()+") ROT:"+plane1.getRotation());
    }

    @Override
    public void render(GameContainer container, Graphics g) throws SlickException {
        //land.draw(0, 0);
        g.clear();
        //Calculo la posicion de la cámara, que sería el centro
        float x = (float) camara.getPosicion().getX();
        float y = (float) camara.getPosicion().getY();
        System.out.println("Camera("+x+","+y+")");
        System.out.println("CameraTile("+(int)x/32+","+(int)y/32+")");
        /*
        // Pero lo desplazo 500 a la izq y arriba, para que se qude como un cuadrado
        int dx = (int) x - 500;
        int dy = (int) y - 500;
        // Sin llegar a menos de 0
        if (dx < 0) {
            dx = 0;
        }
        if (dy < 0) {
            dy = 0;
        }*/
        // Y con translate movemos la cámara
        g.translate(x, y);
        g.scale(scale, scale);
        //map.tmap.render(0,0);
        //renderMap(container, g, (int)-x/32, (int)-y/32);
        for(int i=(int)-x; i<75; i++){
            for(int j=(int)-y; j<40; j++){
                //System.out.println("x="+i+" y="+j);
                int tileID = map.tmap.getTileId(i, j, 0);
                if (tileID==1) tile1.draw(i*32f,j*32f,1);
                if (tileID==2) tile2.draw(i*32f,j*32f,1);
                if (tileID==3) tile3.draw(i*32f,j*32f,1);
                if (tileID==4) tile4.draw(i*32f,j*32f,1);
                if (tileID==5) tile5.draw(i*32f,j*32f,1);
                //map.sheet.getSprite(tileID-1, 0).draw(i*32,j*32);
                //System.out.println("renderizando tile x="+i+" y="+j);
            }
        }
        plane1.draw((float) jugador1.getPosicion().getX(), (float) jugador1.getPosicion().getY(), 0.75f);
        plane2.draw((float) jugador2.getPosicion().getX(), (float) jugador2.getPosicion().getY(), 0.75f);
        renderHUD(container, g);
    }

    public boolean entityCollisionWith() throws SlickException {
        for (int i = 0; i < BlockMap.entities.size(); i++) {
            Block entity1 = (Block) BlockMap.entities.get(i);
            if (playerPoly.intersects(entity1.poly)) {
                return true;
            }
        }
        return false;
    }

    private void renderHUD(GameContainer container, Graphics g) {
        float x = (float) camara.getPosicion().getX();
        float y = (float) camara.getPosicion().getY();
        g.drawString("Uniforme", x + 150, y + 100);
        g.drawString("A. Arrive", x + 150, y + 150);
        g.drawString("W. Wander", x + 150, y + 200);
        g.drawString("S. Seek", x + 150, y + 250);
        g.drawString("F. Flee", x + 150, y + 300);
        g.drawString("Aceleado", x + 250, y + 100);
        g.drawString("1. Seek", x + 250, y + 150);
        g.drawString("2. Aling", x + 250, y + 200);
        g.drawString("3. Flee", x + 250, y + 250);
        g.drawString("4. Arrive", x + 250, y + 300);
        g.drawString("V. Vel. Matching", x + 250, y + 350);
        g.drawString("Delegado", x + 350, y + 100);
        g.drawString("P. Pursue", x + 350, y + 150);
        g.drawString("E. Evade", x + 350, y + 200);
        g.drawString("5. Face", x + 350, y + 250);
        g.drawString("6. Wander", x + 350, y + 300);
    }

    private void renderMap(GameContainer container, Graphics g, int x, int y) {
        //int tileID = map.tmap.getTileId(-x, -y, 0);
        //map.sheet.getSprite(tileID-1, 0).draw();
        System.out.println("Empezando a renderizar mapa en x="+x+" y="+y);
        for(int i=x; i<75; i++){
            for(int j=y; j<40; j++){
                //System.out.println("x="+i+" y="+j);
                int tileID = map.tmap.getTileId(i, j, 0);
                map.sheet.getSprite(tileID-1, 0).draw(i*32,j*32);
                //System.out.println("renderizando x="+i+" y="+j);
            }
        }
        /*
        for(int i=x; i<75; i++){
            for(int j=y; j<40; j++){
                //System.out.println("x="+i+" y="+j);
                int tileID = map.tmap.getTileId(i, j, 0);
                if (tileID==1) tile1.draw(i*32,j*32);
                if (tileID==2) tile2.draw(i*32,j*32);
                if (tileID==3) tile3.draw(i*32,j*32);
                if (tileID==4) tile4.draw(i*32,j*32);
                if (tileID==5) tile5.draw(i*32,j*32);
                //map.sheet.getSprite(tileID-1, 0).draw(i*32,j*32);
                System.out.println("renderizando tile x="+i+" y="+j);
            }
        }*/
    }

    private void updateCamera(GameContainer container) {
        Input input = container.getInput();
        int mx = -input.getMouseX();
        int my = -input.getMouseY();
        raton.setPosicion(mx, my);
        /*
        if ((Math.abs(my) < container.getHeight() / 6) || (Math.abs(mx) < container.getWidth() / 6)
                || ((Math.abs(my) > 5 * container.getHeight() / 6)) | (Math.abs(mx) > 5 * container.getWidth() / 6)) {
            
            //raton.setPosicion(mx, my);
            //camara.update(steeringCAM.getSteering(), 0.5, delta);
        }*/
        double cx = camara.getPosicion().getX();
        double cy = camara.getPosicion().getY();
        if (Math.abs(my) < container.getHeight() / 6){
            cy += 10;
        } else if (Math.abs(my) > 5 * container.getHeight() / 6){
            cy-= 10;
        }
        
        if (Math.abs(mx) < container.getWidth() / 6){
            cx += 10;
        } else if (Math.abs(mx) > 5 * container.getWidth() / 6){
            cx -= 10;
        }
        if(cx<0) camara.getPosicion().setX(cx);
        else camara.getPosicion().setX(0);
        if(cy<0) camara.getPosicion().setZ(cy);
        else camara.getPosicion().setZ(0);

        if (Keyboard.isKeyDown(Keyboard.KEY_SUBTRACT)) {
            scale -= 0.01;
        } else if (Keyboard.isKeyDown(Keyboard.KEY_ADD)) {
            scale += 0.01;
        }

        if (scale > 2) {
            scale = 2;
        } else if (scale < 0.5f) {
            scale = 0.5f;
        }
    }
}
